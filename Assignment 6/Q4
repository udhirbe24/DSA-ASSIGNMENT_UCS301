#include <iostream>
using namespace std;
// Node structure for Doubly Linked List
struct Node {
 char data;
 Node* prev;
 Node* next;
};
// FuncƟon to create a new node
Node* createNode(char value) {
 Node* newNode = new Node();
 newNode->data = value;
 newNode->prev = newNode->next = NULL;
 return newNode;
}
// FuncƟon to insert a node at the end
void insertEnd(Node*& head, char value) {
 Node* newNode = createNode(value);
 if (head == NULL) {
 head = newNode;
 return;
 }
 Node* temp = head;
 while (temp->next)
 temp = temp->next;
 temp->next = newNode;
 newNode->prev = temp;
}
 
// FuncƟon to check if Doubly Linked List is palindrome
bool isPalindrome(Node* head) {
 if (head == NULL || head->next == NULL)
 return true;
 // Find the last node (tail)
 Node* tail = head;
 while (tail->next)
 tail = tail->next;
 // Compare characters from both ends
 while (head != tail && tail->next != head) {
 if (head->data != tail->data)
 return false;
 head = head->next;
 tail = tail->prev;
 }
 return true;
}
// Main funcƟon
int main() {
 Node* head = NULL;
 // Example Input: LEVEL
 insertEnd(head, 'L');
 insertEnd(head, 'E');
 insertEnd(head, 'V');
 insertEnd(head, 'E');
 insertEnd(head, 'L');
 
 cout << "The given Doubly Linked List represents: LEVEL\n";
 if (isPalindrome(head))
 cout << "Output: True\n";
 else
 cout << "Output: False\n";
 return 0;
}
